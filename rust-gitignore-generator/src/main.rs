use std::fs;
use std::io::{self};
use std::path::Path;

const GITIGNORE_CONTENT: &str = r#"# Created by https://www.toptal.com/developers/gitignore/api/rust
# Edit at https://www.toptal.com/developers/gitignore?templates=rust

### Rust ###
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# End of https://www.toptal.com/developers/gitignore/api/rust
"#;

fn main() {
    let gitignore_path = Path::new(".gitignore");

    if gitignore_path.exists() {
        println!("El archivo .gitignore ya existe. ¿Deseas sobrescribirlo? (y/n)");

        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Error al leer la entrada.");
        let input = input.trim();

        if input.to_lowercase() != "y" {
            println!("Operación cancelada.");
            return;
        }
    }

    match fs::write(gitignore_path, GITIGNORE_CONTENT) {
        Ok(_) => println!("Archivo .gitignore generado exitosamente."),
        Err(err) => eprintln!("Error al generar el archivo .gitignore: {}", err),
    }
}